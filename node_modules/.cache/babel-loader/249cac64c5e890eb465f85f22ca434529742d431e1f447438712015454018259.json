{"ast":null,"code":"var _jsxFileName = \"/Users/jessica/Desktop/Miro Mindmap viz/vercel_native_deploy/src/components/MindMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback, useRef } from \"react\";\nimport ReactFlow, { Background, MiniMap, Controls, useNodesState, useEdgesState, addEdge } from \"react-flow\";\nimport { useGPT } from \"../hooks/useGPT.ts\";\nimport { transformGPTToFlow } from \"../utils/mindMapTransform\";\nimport Legend from \"./Legend.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Fit view options for React Flow (padding, etc.)\nconst fitViewOptions = {\n  padding: 0.2,\n  includeHiddenNodes: true\n};\n\n// The main mind map component using React Flow.\nconst MindMap = ({\n  userQuery,\n  triggerUpdate\n}) => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const {\n    queryGPT,\n    loading\n  } = useGPT();\n\n  // Reference to current mind map state for context\n  const mindMapContextRef = useRef({\n    nodes: [],\n    edges: []\n  });\n\n  // Trigger update: send context + user query to GPT backend, then update the graph\n  useEffect(() => {\n    const updateMindMap = async () => {\n      if (!userQuery) return;\n      // Save current state for context\n      mindMapContextRef.current = {\n        nodes,\n        edges\n      };\n      // Call GPT API with query + context\n      const gptData = await queryGPT(userQuery, mindMapContextRef.current);\n      if (gptData && gptData.nodes && gptData.edges) {\n        // Transform GPT's output into React Flow format\n        const {\n          nodes: newNodes,\n          edges: newEdges\n        } = transformGPTToFlow(gptData, nodes, edges);\n        setNodes(newNodes);\n        setEdges(newEdges);\n      }\n    };\n    updateMindMap();\n    // eslint-disable-next-line\n  }, [triggerUpdate]);\n\n  // Allow user to manually connect nodes (drag edge)\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      flex: 1,\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      fitView: true,\n      fitViewOptions: fitViewOptions,\n      attributionPosition: \"bottom-right\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 20,\n        right: 20,\n        background: \"#fffbe8\",\n        padding: 16,\n        borderRadius: 8,\n        boxShadow: \"0 2px 8px rgba(0,0,0,0.10)\",\n        fontWeight: \"bold\"\n      },\n      children: \"Querying AI...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"mZWSDr5q1ohUXTcCyUuIF5KLnCQ=\", false, function () {\n  return [useNodesState, useEdgesState, useGPT];\n});\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useEffect","useCallback","useRef","ReactFlow","Background","MiniMap","Controls","useNodesState","useEdgesState","addEdge","useGPT","transformGPTToFlow","Legend","jsxDEV","_jsxDEV","fitViewOptions","padding","includeHiddenNodes","MindMap","userQuery","triggerUpdate","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","queryGPT","loading","mindMapContextRef","updateMindMap","current","gptData","newNodes","newEdges","onConnect","params","eds","style","flex","height","children","fitView","attributionPosition","fileName","_jsxFileName","lineNumber","columnNumber","position","top","right","background","borderRadius","boxShadow","fontWeight","_c","$RefreshReg$"],"sources":["/Users/jessica/Desktop/Miro Mindmap viz/vercel_native_deploy/src/components/MindMap.tsx"],"sourcesContent":["import React, { useEffect, useCallback, useRef } from \"react\";\nimport ReactFlow, {\n  Background, MiniMap, Controls,\n  useNodesState, useEdgesState, addEdge, Node, Edge,\n  Position, Connection, FitViewOptions,\n} from \"react-flow\";\nimport { useGPT } from \"../hooks/useGPT.ts\";\nimport { transformGPTToFlow } from \"../utils/mindMapTransform\";\nimport Legend from \"./Legend.tsx\";\n\ninterface MindMapProps {\n  userQuery: string;\n  triggerUpdate: number;\n}\n\n// Fit view options for React Flow (padding, etc.)\nconst fitViewOptions: FitViewOptions = {\n  padding: 0.2,\n  includeHiddenNodes: true,\n};\n\n// The main mind map component using React Flow.\nconst MindMap: React.FC<MindMapProps> = ({ userQuery, triggerUpdate }) => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const { queryGPT, loading } = useGPT();\n\n  // Reference to current mind map state for context\n  const mindMapContextRef = useRef<{ nodes: Node[]; edges: Edge[] }>({ nodes: [], edges: [] });\n\n  // Trigger update: send context + user query to GPT backend, then update the graph\n  useEffect(() => {\n    const updateMindMap = async () => {\n      if (!userQuery) return;\n      // Save current state for context\n      mindMapContextRef.current = { nodes, edges };\n      // Call GPT API with query + context\n      const gptData = await queryGPT(userQuery, mindMapContextRef.current);\n      if (gptData && gptData.nodes && gptData.edges) {\n        // Transform GPT's output into React Flow format\n        const { nodes: newNodes, edges: newEdges } = transformGPTToFlow(gptData, nodes, edges);\n        setNodes(newNodes);\n        setEdges(newEdges);\n      }\n    };\n    updateMindMap();\n    // eslint-disable-next-line\n  }, [triggerUpdate]);\n\n  // Allow user to manually connect nodes (drag edge)\n  const onConnect = useCallback((params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)), [setEdges]);\n\n  return (\n    <div style={{ flex: 1, height: \"100vh\" }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        fitView\n        fitViewOptions={fitViewOptions}\n        attributionPosition=\"bottom-right\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n      <Legend />\n      {loading && (\n        <div style={{\n          position: \"absolute\", top: 20, right: 20, background: \"#fffbe8\", padding: 16, borderRadius: 8,\n          boxShadow: \"0 2px 8px rgba(0,0,0,0.10)\", fontWeight: \"bold\"\n        }}>\n          Querying AI...\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MindMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}