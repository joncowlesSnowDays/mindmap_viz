{"ast":null,"code":"/*\n Expected GPT output:\n {\n   nodes: [\n     { id: \"concept-1\", label: \"Thrusters\", group: \"Propulsion\", type: \"concept\", preview: false, collapsed: false, ... },\n     ...\n   ],\n   edges: [\n     { id: \"edge-1\", source: \"concept-1\", target: \"concept-2\", type: \"informs\" },\n     ...\n   ]\n }\n*/\nexport function transformGPTToFlow(gptData, prevNodes, prevEdges) {\n  if (!gptData || !gptData.nodes) return {\n    nodes: [],\n    edges: []\n  };\n\n  // Map node data to React Flow node format\n  const nodes = gptData.nodes.map(n => ({\n    id: n.id,\n    type: n.preview ? \"input\" : \"default\",\n    data: {\n      label: n.label,\n      group: n.group,\n      preview: !!n.preview,\n      collapsed: !!n.collapsed,\n      ...n\n    },\n    position: n.position || {\n      x: Math.random() * 400,\n      y: Math.random() * 300\n    },\n    parentNode: n.parentId || undefined,\n    style: {\n      border: n.preview ? \"2px dashed #c026d3\" : \"1px solid #e5e7eb\",\n      opacity: n.preview ? 0.75 : 1,\n      background: n.collapsed ? \"#eee\" : \"#fff\"\n    }\n  }));\n\n  // Map edges and apply color/type\n  const edges = gptData.edges.map(e => ({\n    id: e.id,\n    source: e.source,\n    target: e.target,\n    label: e.type,\n    style: {\n      stroke: e.type === \"informs\" ? \"#3b82f6\" : e.type === \"depends on\" ? \"#22c55e\" : e.type === \"related\" ? \"#f59e42\" : \"#444\",\n      strokeWidth: 2,\n      strokeDasharray: e.preview ? \"4 2\" : undefined\n    },\n    animated: !!e.preview\n  }));\n  return {\n    nodes,\n    edges\n  };\n}","map":{"version":3,"names":["transformGPTToFlow","gptData","prevNodes","prevEdges","nodes","edges","map","n","id","type","preview","data","label","group","collapsed","position","x","Math","random","y","parentNode","parentId","undefined","style","border","opacity","background","e","source","target","stroke","strokeWidth","strokeDasharray","animated"],"sources":["/Users/jessica/Desktop/Miro Mindmap viz/vercel_native_deploy/src/utils/mindMapTransform.ts"],"sourcesContent":["import { Node, Edge } from \"react-flow\";\n\n/*\n Expected GPT output:\n {\n   nodes: [\n     { id: \"concept-1\", label: \"Thrusters\", group: \"Propulsion\", type: \"concept\", preview: false, collapsed: false, ... },\n     ...\n   ],\n   edges: [\n     { id: \"edge-1\", source: \"concept-1\", target: \"concept-2\", type: \"informs\" },\n     ...\n   ]\n }\n*/\nexport function transformGPTToFlow(gptData: any, prevNodes: Node[], prevEdges: Edge[]): { nodes: Node[]; edges: Edge[] } {\n  if (!gptData || !gptData.nodes) return { nodes: [], edges: [] };\n\n  // Map node data to React Flow node format\n  const nodes: Node[] = gptData.nodes.map((n: any) => ({\n    id: n.id,\n    type: n.preview ? \"input\" : \"default\",\n    data: {\n      label: n.label,\n      group: n.group,\n      preview: !!n.preview,\n      collapsed: !!n.collapsed,\n      ...n,\n    },\n    position: n.position || { x: Math.random() * 400, y: Math.random() * 300 },\n    parentNode: n.parentId || undefined,\n    style: {\n      border: n.preview ? \"2px dashed #c026d3\" : \"1px solid #e5e7eb\",\n      opacity: n.preview ? 0.75 : 1,\n      background: n.collapsed ? \"#eee\" : \"#fff\",\n    },\n  }));\n\n  // Map edges and apply color/type\n  const edges: Edge[] = gptData.edges.map((e: any) => ({\n    id: e.id,\n    source: e.source,\n    target: e.target,\n    label: e.type,\n    style: {\n      stroke: e.type === \"informs\" ? \"#3b82f6\"\n        : e.type === \"depends on\" ? \"#22c55e\"\n        : e.type === \"related\" ? \"#f59e42\"\n        : \"#444\",\n      strokeWidth: 2,\n      strokeDasharray: e.preview ? \"4 2\" : undefined,\n    },\n    animated: !!e.preview,\n  }));\n\n  return { nodes, edges };\n}\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,kBAAkBA,CAACC,OAAY,EAAEC,SAAiB,EAAEC,SAAiB,EAAoC;EACvH,IAAI,CAACF,OAAO,IAAI,CAACA,OAAO,CAACG,KAAK,EAAE,OAAO;IAAEA,KAAK,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC;;EAE/D;EACA,MAAMD,KAAa,GAAGH,OAAO,CAACG,KAAK,CAACE,GAAG,CAAEC,CAAM,KAAM;IACnDC,EAAE,EAAED,CAAC,CAACC,EAAE;IACRC,IAAI,EAAEF,CAAC,CAACG,OAAO,GAAG,OAAO,GAAG,SAAS;IACrCC,IAAI,EAAE;MACJC,KAAK,EAAEL,CAAC,CAACK,KAAK;MACdC,KAAK,EAAEN,CAAC,CAACM,KAAK;MACdH,OAAO,EAAE,CAAC,CAACH,CAAC,CAACG,OAAO;MACpBI,SAAS,EAAE,CAAC,CAACP,CAAC,CAACO,SAAS;MACxB,GAAGP;IACL,CAAC;IACDQ,QAAQ,EAAER,CAAC,CAACQ,QAAQ,IAAI;MAAEC,CAAC,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;MAAEC,CAAC,EAAEF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;IAAI,CAAC;IAC1EE,UAAU,EAAEb,CAAC,CAACc,QAAQ,IAAIC,SAAS;IACnCC,KAAK,EAAE;MACLC,MAAM,EAAEjB,CAAC,CAACG,OAAO,GAAG,oBAAoB,GAAG,mBAAmB;MAC9De,OAAO,EAAElB,CAAC,CAACG,OAAO,GAAG,IAAI,GAAG,CAAC;MAC7BgB,UAAU,EAAEnB,CAAC,CAACO,SAAS,GAAG,MAAM,GAAG;IACrC;EACF,CAAC,CAAC,CAAC;;EAEH;EACA,MAAMT,KAAa,GAAGJ,OAAO,CAACI,KAAK,CAACC,GAAG,CAAEqB,CAAM,KAAM;IACnDnB,EAAE,EAAEmB,CAAC,CAACnB,EAAE;IACRoB,MAAM,EAAED,CAAC,CAACC,MAAM;IAChBC,MAAM,EAAEF,CAAC,CAACE,MAAM;IAChBjB,KAAK,EAAEe,CAAC,CAAClB,IAAI;IACbc,KAAK,EAAE;MACLO,MAAM,EAAEH,CAAC,CAAClB,IAAI,KAAK,SAAS,GAAG,SAAS,GACpCkB,CAAC,CAAClB,IAAI,KAAK,YAAY,GAAG,SAAS,GACnCkB,CAAC,CAAClB,IAAI,KAAK,SAAS,GAAG,SAAS,GAChC,MAAM;MACVsB,WAAW,EAAE,CAAC;MACdC,eAAe,EAAEL,CAAC,CAACjB,OAAO,GAAG,KAAK,GAAGY;IACvC,CAAC;IACDW,QAAQ,EAAE,CAAC,CAACN,CAAC,CAACjB;EAChB,CAAC,CAAC,CAAC;EAEH,OAAO;IAAEN,KAAK;IAAEC;EAAM,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}