{"ast":null,"code":"var _jsxFileName = \"/Users/jessica/Desktop/Miro Mindmap viz/vercel_native_deploy/src/components/MindMap.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback, useRef } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { useGPT } from \"../hooks/useGPT.ts\";\nimport { transformGPTToFlow } from \"../utils/mindMapTransform.ts\";\nimport Legend from \"./Legend.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst fitViewOptions = {\n  padding: 0.2,\n  includeHiddenNodes: true\n};\nconst centerX = 400;\nconst centerY = 300;\nconst layerRadius = 180;\n\n// --- MULTI-LAYER RADIAL LAYOUT HELPERS ---\n\n// Build a map from parent node ID to their children node IDs, based on the edges.\nfunction getChildMap(edges) {\n  const childMap = {};\n  edges.forEach(e => {\n    if (!childMap[e.source]) childMap[e.source] = [];\n    childMap[e.source].push(e.target);\n  });\n  return childMap;\n}\n\n// Recursively assign positions in concentric circles for all descendants.\nfunction assignRadialPositions(nodes, edges, rootId, center, layerRadius = 180, angleStart = 0, angleEnd = 2 * Math.PI, layer = 1, parentCount = 1) {\n  const childMap = getChildMap(edges);\n  const idToNode = Object.fromEntries(nodes.map(n => [n.id, n]));\n  function placeSubtree(id, center, radius, aStart, aEnd, layer, siblings) {\n    const children = childMap[id] || [];\n    const angleSpan = aEnd - aStart;\n    children.forEach((childId, idx) => {\n      const angle = aStart + angleSpan * (idx + 1) / (children.length + 1);\n      idToNode[childId].position = {\n        x: center.x + radius * layer * Math.cos(angle),\n        y: center.y + radius * layer * Math.sin(angle)\n      };\n      // Recursively place this child's children\n      placeSubtree(childId, idToNode[childId].position, radius, angle - angleSpan / (2 * (children.length || 1)), angle + angleSpan / (2 * (children.length || 1)), layer + 1, children.length);\n    });\n  }\n\n  // Place the root node at the center\n  if (idToNode[rootId]) {\n    idToNode[rootId].position = {\n      ...center\n    };\n    placeSubtree(rootId, center, layerRadius, angleStart, angleEnd, layer, parentCount);\n  }\n  // Any unconnected nodes keep their positions (or can be scattered)\n  return Object.values(idToNode);\n}\n\n// --------------------\n\nconst MindMap = ({\n  userQuery,\n  triggerUpdate\n}) => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const {\n    queryGPT,\n    loading\n  } = useGPT();\n\n  // Reference to current mind map state for context\n  const mindMapContextRef = useRef({\n    nodes: [],\n    edges: []\n  });\n\n  // --- Enable click-to-expand for ALL nodes ---\n  const onNodeClick = useCallback(async (event, node) => {\n    mindMapContextRef.current = {\n      nodes,\n      edges\n    };\n    await queryGPT(node.data.label || node.id, mindMapContextRef.current);\n    // UI update is triggered by parent (or refresh as needed)\n  }, [nodes, edges, queryGPT]);\n\n  // On user query or trigger, update mind map using GPT\n  useEffect(() => {\n    const updateMindMap = async () => {\n      if (!userQuery) return;\n      mindMapContextRef.current = {\n        nodes,\n        edges\n      };\n      // Call GPT API with query + context\n      const gptData = await queryGPT(userQuery, mindMapContextRef.current);\n      if (gptData && gptData.nodes && gptData.edges) {\n        var _newNodes$;\n        // Transform GPT's output into React Flow format\n        let {\n          nodes: newNodes,\n          edges: newEdges\n        } = transformGPTToFlow(gptData, nodes, edges);\n\n        // Find the main/root node (first one, or customize)\n        const mainNodeId = ((_newNodes$ = newNodes[0]) === null || _newNodes$ === void 0 ? void 0 : _newNodes$.id) || \"main\";\n\n        // --- MULTI-LAYER RADIAL LAYOUT ---\n        newNodes = assignRadialPositions(newNodes, newEdges, mainNodeId, {\n          x: centerX,\n          y: centerY\n        });\n\n        // --- Ensure arrows from main to direct children ---\n        const childMap = getChildMap(newEdges);\n        const children = childMap[mainNodeId] || [];\n        const existingLinks = newEdges.filter(e => e.source === mainNodeId);\n        children.forEach(childId => {\n          if (!existingLinks.find(e => e.target === childId)) {\n            newEdges.push({\n              id: `e-${mainNodeId}-${childId}`,\n              source: mainNodeId,\n              target: childId,\n              type: 'default',\n              markerEnd: {\n                type: MarkerType.ArrowClosed\n              }\n            });\n          }\n        });\n        setNodes(newNodes);\n        setEdges(newEdges);\n      }\n    };\n    updateMindMap();\n    // eslint-disable-next-line\n  }, [triggerUpdate]);\n\n  // Allow user to manually connect nodes (drag edge)\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      flex: 1,\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onNodeClick: onNodeClick,\n      fitView: true,\n      fitViewOptions: fitViewOptions,\n      attributionPosition: \"bottom-right\",\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: 20,\n        right: 20,\n        background: \"#fffbe8\",\n        padding: 16,\n        borderRadius: 8,\n        boxShadow: \"0 2px 8px rgba(0,0,0,0.10)\",\n        fontWeight: \"bold\"\n      },\n      children: \"Querying AI...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n_s(MindMap, \"cDbCvkDiEwaAS2JkO9npYee/xnE=\", false, function () {\n  return [useNodesState, useEdgesState, useGPT];\n});\n_c = MindMap;\nexport default MindMap;\nvar _c;\n$RefreshReg$(_c, \"MindMap\");","map":{"version":3,"names":["React","useEffect","useCallback","useRef","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","MarkerType","useGPT","transformGPTToFlow","Legend","jsxDEV","_jsxDEV","fitViewOptions","padding","includeHiddenNodes","centerX","centerY","layerRadius","getChildMap","edges","childMap","forEach","e","source","push","target","assignRadialPositions","nodes","rootId","center","angleStart","angleEnd","Math","PI","layer","parentCount","idToNode","Object","fromEntries","map","n","id","placeSubtree","radius","aStart","aEnd","siblings","children","angleSpan","childId","idx","angle","length","position","x","cos","y","sin","values","MindMap","userQuery","triggerUpdate","_s","setNodes","onNodesChange","setEdges","onEdgesChange","queryGPT","loading","mindMapContextRef","onNodeClick","event","node","current","data","label","updateMindMap","gptData","_newNodes$","newNodes","newEdges","mainNodeId","existingLinks","filter","find","type","markerEnd","ArrowClosed","onConnect","params","eds","style","flex","height","fitView","attributionPosition","fileName","_jsxFileName","lineNumber","columnNumber","top","right","background","borderRadius","boxShadow","fontWeight","_c","$RefreshReg$"],"sources":["/Users/jessica/Desktop/Miro Mindmap viz/vercel_native_deploy/src/components/MindMap.tsx"],"sourcesContent":["import React, { useEffect, useCallback, useRef } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n  Node,\n  Edge,\n  Connection,\n  MarkerType,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { useGPT } from \"../hooks/useGPT.ts\";\nimport { transformGPTToFlow } from \"../utils/mindMapTransform.ts\";\nimport Legend from \"./Legend.tsx\";\n\ninterface MindMapProps {\n  userQuery: string;\n  triggerUpdate: number;\n}\n\nconst fitViewOptions = {\n  padding: 0.2,\n  includeHiddenNodes: true,\n};\n\nconst centerX = 400;\nconst centerY = 300;\nconst layerRadius = 180;\n\n// --- MULTI-LAYER RADIAL LAYOUT HELPERS ---\n\n// Build a map from parent node ID to their children node IDs, based on the edges.\nfunction getChildMap(edges: Edge[]) {\n  const childMap: Record<string, string[]> = {};\n  edges.forEach((e) => {\n    if (!childMap[e.source]) childMap[e.source] = [];\n    childMap[e.source].push(e.target);\n  });\n  return childMap;\n}\n\n// Recursively assign positions in concentric circles for all descendants.\nfunction assignRadialPositions(\n  nodes: Node[],\n  edges: Edge[],\n  rootId: string,\n  center: { x: number; y: number },\n  layerRadius: number = 180,\n  angleStart: number = 0,\n  angleEnd: number = 2 * Math.PI,\n  layer: number = 1,\n  parentCount: number = 1\n) {\n  const childMap = getChildMap(edges);\n  const idToNode: Record<string, Node> = Object.fromEntries(nodes.map((n) => [n.id, n]));\n\n  function placeSubtree(\n    id: string,\n    center: { x: number; y: number },\n    radius: number,\n    aStart: number,\n    aEnd: number,\n    layer: number,\n    siblings: number\n  ) {\n    const children = childMap[id] || [];\n    const angleSpan = aEnd - aStart;\n    children.forEach((childId, idx) => {\n      const angle = aStart + (angleSpan * (idx + 1)) / (children.length + 1);\n      idToNode[childId].position = {\n        x: center.x + radius * layer * Math.cos(angle),\n        y: center.y + radius * layer * Math.sin(angle),\n      };\n      // Recursively place this child's children\n      placeSubtree(\n        childId,\n        idToNode[childId].position,\n        radius,\n        angle - angleSpan / (2 * (children.length || 1)),\n        angle + angleSpan / (2 * (children.length || 1)),\n        layer + 1,\n        children.length\n      );\n    });\n  }\n\n  // Place the root node at the center\n  if (idToNode[rootId]) {\n    idToNode[rootId].position = { ...center };\n    placeSubtree(rootId, center, layerRadius, angleStart, angleEnd, layer, parentCount);\n  }\n  // Any unconnected nodes keep their positions (or can be scattered)\n  return Object.values(idToNode);\n}\n\n// --------------------\n\nconst MindMap: React.FC<MindMapProps> = ({ userQuery, triggerUpdate }) => {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const { queryGPT, loading } = useGPT();\n\n  // Reference to current mind map state for context\n  const mindMapContextRef = useRef<{ nodes: Node[]; edges: Edge[] }>({ nodes: [], edges: [] });\n\n  // --- Enable click-to-expand for ALL nodes ---\n  const onNodeClick = useCallback(\n    async (event, node) => {\n      mindMapContextRef.current = { nodes, edges };\n      await queryGPT(node.data.label || node.id, mindMapContextRef.current);\n      // UI update is triggered by parent (or refresh as needed)\n    },\n    [nodes, edges, queryGPT]\n  );\n\n  // On user query or trigger, update mind map using GPT\n  useEffect(() => {\n    const updateMindMap = async () => {\n      if (!userQuery) return;\n      mindMapContextRef.current = { nodes, edges };\n      // Call GPT API with query + context\n      const gptData = await queryGPT(userQuery, mindMapContextRef.current);\n      if (gptData && gptData.nodes && gptData.edges) {\n        // Transform GPT's output into React Flow format\n        let { nodes: newNodes, edges: newEdges } = transformGPTToFlow(gptData, nodes, edges);\n\n        // Find the main/root node (first one, or customize)\n        const mainNodeId = newNodes[0]?.id || \"main\";\n\n        // --- MULTI-LAYER RADIAL LAYOUT ---\n        newNodes = assignRadialPositions(\n          newNodes,\n          newEdges,\n          mainNodeId,\n          { x: centerX, y: centerY }\n        );\n\n        // --- Ensure arrows from main to direct children ---\n        const childMap = getChildMap(newEdges);\n        const children = childMap[mainNodeId] || [];\n        const existingLinks = newEdges.filter(e => e.source === mainNodeId);\n        children.forEach(childId => {\n          if (!existingLinks.find(e => e.target === childId)) {\n            newEdges.push({\n              id: `e-${mainNodeId}-${childId}`,\n              source: mainNodeId,\n              target: childId,\n              type: 'default',\n              markerEnd: { type: MarkerType.ArrowClosed },\n            });\n          }\n        });\n\n        setNodes(newNodes);\n        setEdges(newEdges);\n      }\n    };\n    updateMindMap();\n    // eslint-disable-next-line\n  }, [triggerUpdate]);\n\n  // Allow user to manually connect nodes (drag edge)\n  const onConnect = useCallback(\n    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges]\n  );\n\n  return (\n    <div style={{ flex: 1, height: \"100vh\" }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        onNodeClick={onNodeClick}\n        fitView\n        fitViewOptions={fitViewOptions}\n        attributionPosition=\"bottom-right\"\n      >\n        <MiniMap />\n        <Controls />\n        <Background />\n      </ReactFlow>\n      <Legend />\n      {loading && (\n        <div style={{\n          position: \"absolute\", top: 20, right: 20, background: \"#fffbe8\", padding: 16, borderRadius: 8,\n          boxShadow: \"0 2px 8px rgba(0,0,0,0.10)\", fontWeight: \"bold\"\n        }}>\n          Querying AI...\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MindMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}